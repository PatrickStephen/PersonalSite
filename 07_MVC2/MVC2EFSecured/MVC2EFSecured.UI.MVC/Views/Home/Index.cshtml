@{
    ViewBag.Title = "Home Page";
}
<h2>Bookstore Home!</h2>
<div class="row">
    <h2 class="col-md-12">Welcome to MVC2! - Authentication/Authorization and Entity Framework Implementation!</h2>
    <div class="col-md-12">
        <p>
            In this course we will discuss implementation of Identity Framework to add membership/security
            to a data driven website. Identity Framework consists of Classes, routines, and MVC portions
            that allow us to secure a website. Identity Framework is sometimes referred to as ONE IDENTITY, or MS
            ONE IDENTITY.
        </p>
        <p>
            Security is comprised of 2 separate concepts. Authentication and Authorization. Authentication
            is "you are who you say you are." and is typically done with verification of a UserID and a password
            combination. Authorization refers to the access that you granted or what you are "authorized" to view.
            If you arrive a website and are browsing you are considered to be an "Anonymous or Unauthenticated" user.
            We have the capability to code security based on this lack of credentials, in addition to being able
            to code to a set of credentials (your authenticated account).
        </p>
        <p>
            In order to Authenticate a user, a UserID must be established. For authorization it is best to
            establish roles and then add users with like capabilities to the defined roles. Once that is done
            you can authorize based on the role name instead of individual users.
        </p>
        <p>
            Identity Framework overwrites 46 different files when run. There are several of these files that we will
            need to view and/or update. The most important one of these files (when it comes to running/testing the
            website) is the ROOT web.config. Identity Samples adds a 2nd connection string called "DefaultConnection"
            and runtime will not allow an application to run when 2 connection strings have the same name. (see
            web.config notes)
            <ul>
                <li>
                    <strong>IdentityModel (models Folder)</strong> - Defines the Authentication type (cookie), the connection to
                    be used, and Sets the Initialization for the Identity Data Structure (db tables and fields)
                </li>
                <li>
                    <strong>IdentityConfig (App_Start folder)</strong> - Holds the default login credentials for when Identity is
                    first used. Additionally, it holds the instructions for when to Drop the database and create a new
                    one. The default is to drop and create if the Model changes. This can result in data loss.
                </li>
                <li>
                    <strong>RolesAdmin Controller, Folder(in Views)</strong>, and all CRUD Views for managing Roles. This set of
                    views should ALWAYS be styled, although in a lot of examples you will not see them that way.
                    The controller provides all of the necessary actions to provide CRUD functions for Identity.
                    There should be little to no work in the controller, mostly just styling the views.
                </li>
                <li>
                    <strong>UsersAdmin Controller, Folder(in Views)</strong>, and all CRUD Views for managing Users. This set of
                    views should ALWAYS be styled, although in a lot of examples you will not see them that way.
                    The controller provides all of the necessary actions to provide CRUD functions for Identity.
                    There should be little to no work in the controller, mostly just styling the views.
                </li>
                <li>
                    The <strong>Shared Layout</strong> gets an addition to it that allows for access to Managing Users and
                    Roles. (that is the update to the shared layout page when Identity runs. If you have already
                    converted a layout page, the current data would OVERLAY your conversion. You would have to re-convert
                    a template.
                </li>
                <li>
                    In the <strong>web.config</strong> a second connection string is added. It needs to be commented out or removed
                    so that a proper connection can be created. Your connection string for your application should
                    be the one that is pointed to Identity Tables. Rarely will you have a secondary data structure
                    to hold ONLY Identity data.
                </li>
                <li>
                    When <strong>Identity Samples </strong>runs, it Secures the About Action in the home controller. If you are using
                    that action or trying to test, you may want to go to the controller and comment out or delete
                    the securing of that action.
                </li>
                <li>
                    Other negligible changes are made to the site structure as well.
                </li>
            </ul>
        </p>
        <p>
            <strong>Users vs Roles</strong> - users are individuals who have authentication credentials stored in the database
            for the website. We can access them by their UserName (emailAddress) or their UserID (alpha-numeric GUID
            - Global Unique IDentifier). If users do not have authentication credentials, then they are referred
            to as Anonymous or Unauthenticated. Roles are used to group users with the same Access Rules. If you
            have a new level of access required, then a new role should be created and ANY user who should have
            that specified access should be added to that role. (users EDIT).
        </p>
    </div>
    <h2 class="text-center col-md-12">Topics and Files associated for notes:</h2>
    <div class="col-md-12">
        <ul>
            <li><strong>Locking down a view</strong> - Layout</li>
            <li><strong>Locking down a Controller/actions</strong> - Account Controller</li>
            <li><strong>Adding Registered User to a Role</strong> - Account Controller/Register (Post)</li>
            <li><strong>Updating LoginPartial for Icons</strong> - Views/Shared/LoginPartial</li>
            <li><strong>Updating LoginPartial to be nested in a ul in the layout</strong> -  Views/Shared/LoginPartial</li>
            <li><strong>New Format for LoginView</strong> - Views/Account/LoginView</li>
            <li><strong>New Format for Register</strong> - Views/Account/Register (Custom Styles))</li>
        </ul>
    </div>
</div>